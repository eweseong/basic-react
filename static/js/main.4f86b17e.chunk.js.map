{"version":3,"sources":["tutorials/07/components/PosterList/PosterList.module.css","tutorials/07/assets/netflix-logo.svg","tutorials/07/components/AppBar/AppBar.js","tutorials/07/components/AppLogo/AppLogo.js","tutorials/07/components/LoginButton/LoginButton.js","tutorials/07/components/LogoutButton/LogoutButton.js","tutorials/07/components/NavItem/NavItem.js","tutorials/07/components/Greeting/Greeting.js","tutorials/07/components/Poster/Poster.js","tutorials/07/components/WithLoading/WithLoading.js","tutorials/07/services/showService.js","tutorials/07/routes/Home/Home.js","tutorials/07/components/PosterList/PosterList.js","tutorials/07/routes/MyList/MyList.js","tutorials/07/routes/ShowDetail/ShowDetail.js","tutorials/07/components/Netflix/Netflix.js","tutorials/07/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppBar","props","className","children","AppLogo","to","src","logo","alt","LoginButton","type","onClick","login","LogoutButton","logout","NavItem","path","activeClassName","exact","Greeting","username","Poster","poster","id","name","image","pathname","toLowerCase","split","join","state","ListComponent","ShowService","httpClient","axios","create","baseURL","appendImageBase","imagePath","mapResults","data","results","map","result","backdrop_path","poster_path","mapResult","interceptors","request","use","config","params","api_key","process","getNetflixOriginals","get","with_networks","then","getTrendingNow","language","PosterListLoader","title","posters","showBackdrop","styles","container","length","original_name","original_title","key","isLoading","load","otherProps","loader","this","setState","Component","Home","MyList","ShowDetail","location","first_air_date","overview","release_date","vote_average","date","rating","Math","round","ratingClass","classnames","data-id","withRouter","Netflix","user","isLoggedIn","button","NetflixRouter","basename","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4f86b17e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"PosterList_title__2IisD\",\"container\":\"PosterList_container__ud-OS\"};","module.exports = __webpack_public_path__ + \"static/media/netflix-logo.067dbb15.svg\";","import React from 'react';\nimport './AppBar.css';\n\nexport default function AppBar(props) {\n  return <div className=\"app-bar\">{props.children}</div>;\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './AppLogo.css';\n\nexport default function AppLogo(props) {\n  return (\n    <Link className=\"app-logo\" to=\"/\">\n      <img src={props.logo} alt=\"logo\" />\n    </Link>\n  );\n}\n","import React from 'react';\n\nexport default function LoginButton(props) {\n  return (\n    <button className=\"btn\" type=\"button\" onClick={props.login}>\n      Login\n    </button>\n  );\n}\n","import React from 'react';\nimport './LogoutButton.css';\n\nexport default function LogoutButton(props) {\n  return (\n    <button className=\"btn logout-button\" type=\"button\" onClick={props.logout}>\n      Logout\n    </button>\n  );\n}\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './NavItem.css';\n\nexport default function NavItem({ path, children }) {\n  return (\n    <NavLink\n      activeClassName=\"nav-item--active\"\n      className=\"nav-item\"\n      to={path}\n      exact\n    >\n      {children}\n    </NavLink>\n  );\n}\n","import React from 'react';\n\nexport default function Greeting(props) {\n  /**\n   * Preventing Component from Rendering\n   *\n   * In rare cases you might want a component to hide itself even though it\n   * was rendered by another component. To do this return null instead of\n   * its render output.\n   */\n  if (!props.username) {\n    return null;\n  }\n\n  /**\n   * Inline If-Else with Conditional Operator\n   *\n   * Another method for conditionally rendering elements inline\n   * is to use the JavaScript conditional operator condition ? true : false.\n   */\n  return <span>Welcome {props.username ? `${props.username}` : 'user'}!</span>;\n}\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './Poster.scss';\n\nexport default function Poster(poster) {\n  const { id, name = '', image } = poster;\n\n  return (\n    <NavLink\n      className=\"poster\"\n      to={{\n        pathname: `shows/${id}/${name.toLowerCase().split(' ').join('_')}`,\n        state: {\n          poster,\n        },\n      }}\n      exact\n    >\n      <img className=\"poster__image\" src={image} alt={name} />\n    </NavLink>\n  );\n}\n","import React, { Component } from 'react';\nimport './WithLoading.css';\n\nexport default function WithLoading(ListComponent) {\n  return class WithLoading extends Component {\n    state = {\n      isLoading: true,\n      posters: [],\n    };\n\n    constructor(props) {\n      super(props);\n      const { load, ...otherProps } = props;\n      this.loader = load;\n      this.otherProps = otherProps;\n    }\n\n    componentDidMount() {\n      this.loader().then((data) => {\n        this.setState({\n          isLoading: false,\n          posters: data,\n        });\n      });\n    }\n\n    render() {\n      if (this.state.isLoading) {\n        return <p className=\"loading\">Loading something</p>;\n      }\n\n      return (\n        <ListComponent posters={this.state.posters} {...this.otherProps} />\n      );\n    }\n  };\n}\n","import axios from 'axios';\n\nconst NETFLIX_NETWORK_ID = '213';\nconst POSTER_IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/original';\n\nconst ShowService = (() => {\n  const httpClient = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n  });\n\n  httpClient.interceptors.request.use((config) => {\n    if (!config.params) {\n      config.params = {};\n    }\n\n    config.params.api_key = process.env.REACT_APP_MOVIE_DB_API_KEY;\n    return config;\n  });\n\n  function appendImageBase(imagePath) {\n    return `${POSTER_IMAGE_BASE_URL}${imagePath}`;\n  }\n\n  function mapResult(results) {\n    return results.map((result) => ({\n      ...result,\n      backdrop_path: appendImageBase(result.backdrop_path),\n      poster_path: appendImageBase(result.poster_path),\n    }));\n  }\n\n  function mapResults({ data: { results = [] } }) {\n    return mapResult(results);\n  }\n\n  return {\n    getNetflixOriginals: () => {\n      return httpClient\n        .get('/discover/tv', {\n          params: {\n            with_networks: NETFLIX_NETWORK_ID,\n          },\n        })\n        .then(mapResults);\n    },\n\n    getTrendingNow: () => {\n      return httpClient\n        .get('/trending/all/week', {\n          params: {\n            language: 'en-US',\n          },\n        })\n        .then(mapResults);\n    },\n  };\n})();\n\nexport default ShowService;\n","import React, { Component } from 'react';\nimport Greeting from '../../components/Greeting/Greeting';\nimport PosterList from '../../components/PosterList/PosterList';\nimport WithLoading from '../../components/WithLoading/WithLoading';\nimport ShowService from '../../services/showService';\n\nconst PosterListLoader = WithLoading(PosterList);\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <div>\n        <Greeting username={this.props.username} />\n        <PosterListLoader\n          title=\"trending now\"\n          load={ShowService.getNetflixOriginals}\n        />\n        <PosterListLoader\n          title=\"netflix originals\"\n          load={ShowService.getTrendingNow}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Poster from '../Poster/Poster';\nimport styles from './PosterList.module.css';\n\nexport default function PosterList({ title, posters, showBackdrop }) {\n  return (\n    <div className=\"poster-list\">\n      <h3 className={styles.title}>{title}</h3>\n      <div className={styles.container}>\n        {posters.length > 0 ? (\n          posters.map((poster) => {\n            const {\n              id,\n              name,\n              original_name,\n              original_title,\n              backdrop_path,\n              poster_path,\n            } = poster;\n            return (\n              <Poster\n                key={id}\n                id={id}\n                name={name || original_name || original_title}\n                image={showBackdrop ? backdrop_path : poster_path}\n                {...poster}\n              />\n            );\n          })\n        ) : (\n          <>This list is empty now, please come back later.</>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\n\nexport default class MyList extends Component {\n  render() {\n    return <div>My List</div>;\n  }\n}\n","import classnames from 'classnames';\nimport React, { Component } from 'react';\nimport { withRouter, Redirect } from 'react-router-dom';\nimport './ShowDetail.css';\n\nclass ShowDetail extends Component {\n  render() {\n    if (!this.props.location.state) {\n      return <Redirect to=\"/\" />;\n    }\n\n    const {\n      backdrop_path,\n      first_air_date,\n      id,\n      name,\n      original_title,\n      overview,\n      release_date,\n      vote_average,\n    } = this.props.location.state.poster;\n    const title = name || original_title;\n    const date = first_air_date || release_date;\n    const rating = Math.round(vote_average * 10);\n    const ratingClass = classnames('show-detail__rating', {\n      'show-detail__rating--good': rating >= 80,\n      'show-detail__rating--average': rating >= 50 && rating < 80,\n      'show-detail__rating--bad': rating < 50,\n    });\n\n    return (\n      <div className=\"show-detail\" data-id={id}>\n        <img className=\"show-detail__image\" src={backdrop_path} alt={title} />\n        <h1>{title}</h1>\n        <p>\n          <span className={ratingClass}>Rating: {rating}%</span>\n          &nbsp;\n          <span className=\"show-detail__date\">Release date: {date}</span>\n        </p>\n        <p className=\"show-detail__overview\">{overview}</p>\n        <button className=\"btn btn--primary show-detail__button\" type=\"button\">\n          Play\n        </button>\n        <button className=\"btn show-detail__button\" type=\"button\">\n          + My List\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(ShowDetail);\n","import React, { Component } from 'react';\nimport { Route, Switch, withRouter } from 'react-router-dom';\nimport logo from '../../assets/netflix-logo.svg';\nimport AppBar from '../../components/AppBar/AppBar';\nimport AppLogo from '../../components/AppLogo/AppLogo';\nimport LoginButton from '../../components/LoginButton/LoginButton';\nimport LogoutButton from '../../components/LogoutButton/LogoutButton';\nimport NavItem from '../../components/NavItem/NavItem';\nimport HomeView from '../../routes/Home/Home';\nimport MyListView from '../../routes/MyList/MyList';\nimport ShowDetailView from '../../routes/ShowDetail/ShowDetail';\nimport './Netflix.css';\n\nclass Netflix extends Component {\n  state = {\n    user: null,\n    isLoggedIn: false,\n  };\n\n  login = () => {\n    this.setState({\n      username: 'johndoe',\n      isLoggedIn: true,\n    });\n  };\n\n  logout = () => {\n    this.setState({\n      username: null,\n      isLoggedIn: false,\n    });\n  };\n\n  render() {\n    const button = this.state.isLoggedIn ? (\n      <LogoutButton logout={this.logout} />\n    ) : (\n      <LoginButton login={this.login} />\n    );\n\n    return (\n      <>\n        <AppBar>\n          <AppLogo logo={logo} />\n          <NavItem path=\"/\">Home</NavItem>\n          <NavItem path=\"/myList\">My List</NavItem>\n          <div className=\"grow\" />\n          {button}\n        </AppBar>\n        <main>\n          <Switch>\n            <Route path=\"/\" exact>\n              <HomeView {...this.state} />\n            </Route>\n            <Route path=\"/myList\" exact>\n              <MyListView {...this.state} />\n            </Route>\n            <Route path=\"/shows/:id/:name?\" exact>\n              <ShowDetailView {...this.state} />\n            </Route>\n          </Switch>\n        </main>\n      </>\n    );\n  }\n}\n\nexport default withRouter(Netflix);\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport Netflix from './components/Netflix/Netflix';\nimport './index.scss';\n\nexport default function NetflixRouter() {\n  return (\n    <Router basename=\"/basic-react\">\n      <Netflix />\n    </Router>\n  );\n}\n","import React from 'react';\nimport './App.css';\n\nimport Tutorial from './tutorials/07';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Tutorial />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}